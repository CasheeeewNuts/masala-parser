0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.9.6
3 info using node@v6.2.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/didierplaindoux/PersonalWork/oss/parsec',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/didierplaindoux/.npm correctMkdir not in flight; initializing
10 info lifecycle parser-combinator@0.1.0~prepublish: parser-combinator@0.1.0
11 silly lifecycle parser-combinator@0.1.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/didierplaindoux/.npm/parser-combinator/0.1.0/package.tgz',
12 verbose tar pack   '/Users/didierplaindoux/PersonalWork/oss/parsec' ]
13 verbose tarball /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package.tgz
14 verbose folder /Users/didierplaindoux/PersonalWork/oss/parsec
15 verbose addLocalTarball adding from inside cache /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package.tgz
16 verbose correctMkdir /Users/didierplaindoux/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd parser-combinator@0.1.0
18 verbose afterAdd /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/didierplaindoux/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package/package.json written
21 silly publish { name: 'parser-combinator',
21 silly publish   description: 'Parser combinators',
21 silly publish   license: 'LGPL-2.1',
21 silly publish   version: '0.1.0',
21 silly publish   homepage: 'https://github.com/d-plaindoux/parsec',
21 silly publish   author:
21 silly publish    { name: 'Didier Plaindoux',
21 silly publish      email: 'd.plaindoux@free.fr',
21 silly publish      url: 'd.plaindoux.free.fr' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/d-plaindoux/parsec.git' },
21 silly publish   bugs: { url: 'https://github.com/d-plaindoux/parsec/issues' },
21 silly publish   licenses:
21 silly publish    [ { type: 'LGPL2',
21 silly publish        url: 'https://github.com/d-plaindoux/parsec/blob/master/LICENSE-LGPL2' } ],
21 silly publish   main: 'lib',
21 silly publish   engines: { node: '>= 5.7.0' },
21 silly publish   scripts: { test: 'grunt default && grunt coverage && cat test/coverage/reports/lcov.info | coveralls' },
21 silly publish   devDependencies:
21 silly publish    { grunt: '~0.4.5',
21 silly publish      'grunt-exec': '~0.4.6',
21 silly publish      'grunt-contrib-clean': '~1.0.0',
21 silly publish      'grunt-contrib-jshint': '~0.6.4',
21 silly publish      'grunt-istanbul': '~0.7.0',
21 silly publish      'grunt-contrib-nodeunit': '~0.4.1',
21 silly publish      'grunt-coveralls': '~1.0.0',
21 silly publish      'grunt-env': '~0.4.2',
21 silly publish      browserify: '~9.0.3',
21 silly publish      'grunt-contrib-uglify': '~0.6.0',
21 silly publish      coveralls: '~2.11.2',
21 silly publish      nodeunit: '~0.9.0' },
21 silly publish   dependencies: {},
21 silly publish   keywords: [],
21 silly publish   readme: '# Javascript Parser Combinators\n\n[![Build Status](https://travis-ci.org/d-plaindoux/parsec.svg)](https://travis-ci.org/d-plaindoux/parsec) \n[![Coverage Status](https://coveralls.io/repos/d-plaindoux/parsec/badge.png?branch=master)](https://coveralls.io/r/d-plaindoux/parsec?branch=master) \n[![unstable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nJavascript parser combinator implementation inspired by the paper titled:\n[Direct Style Monadic Parser Combinators For The Real World](http://research.microsoft.com/en-us/um/people/daan/download/papers/parsec-paper.pdf).\n\n## Tutorial\n\nAccording to Wikipedia *"in functional programming, a parser combinator is a \nhigher-order function that accepts several parsers as input and returns a new \nparser as its output."* \n\n### Hello World\n\n```\nvar P = require(\'parser\'),\n    S = require(\'stream\');\n\nvar p = P.string("Hello").then(P.char(\' \').rep()).thenRight(P.letter.rep());\n            \np.parse(S.ofString("Hello World")).value.join() === "World"\n```\n\n### Character based parsers\n\nLet `P` be the parser library.\n\n```\nP.digit                             (1)\nP.lowerCase                         (2)\nP.upperCase                         (3)\nP.char(\'h\')                         (4)\nP.notChar(\'h\')                      (5)\nP.string("hello")                   (6)\n```\n\n1. Recognize a digit i.e. `\'0\'` ... `\'9\'`.\n2. Recognize a lower case letter i.e. `\'a\'` ... `\'z\'`\n3. Recognize a upper case letter i.e. `\'A\'` ... `\'Z\'`\n4. Recognize the character \'h\'\n5. Recognize any character except \'h\'\n6. Recognize the string `"hello"`\n\n### Combinators\n\nLet `P` be the parser library.\n\n```\nP.lowerCase.or(P.upperCase)         (1)\nP.digit.rep()                       (2)\nP.char(\'-\').opt()                   (3)\nP.char(\' \').optrep()                (4)\nP.lowerCase.then(P.letter.optrep()) (5)\n```\n\n1. Recognize a letter i.e. `\'0\'` ... `\'9\'` **or** `\'A\'` ... `\'Z\'`\n4. Recognize a number with at least one digit \n3. Recognize the character `\'-\'` or nothing\n4. Recognize a least zero white space\n5. Recognize a lowercase then may be letters like `aAaA`\n\n### Transformations\n\nDuring a parsing process each parsed and captured data can be transformed \nan aggregated with other transformed data. For this purpose the `map` \nfunction is available.\n\n```\n// [ char in {\'0\'..\'9\'} ] -> number\nfunction toInteger(digits) {\n    return parseInt(digits.join(\'\'));\n}\n\nP.digit.rep().map(toInteger)        (1)\n```\n\n1. Recognize a sequence of digits and transform it to a number.\n\n## Specifications\n\n### Stream constructors\n- *ofString* : string -> Stream char\n- *ofArray* : &forall; a . [a] -> Stream a\n- *ofParser* : &forall; a c .(Parse a c, Stream c) -> Stream a\n- *buffered* : &forall; a .Stream a -> Stream a\n\n### Parser\n\n#### Basic constructors:\n- *lazy* : &forall; a c . (unit &rarr; Parser a c) &rarr; Parser a c\n- *returns* : &forall; a c . a &rarr; Parser a c\n- *error* : &forall; a c . unit &rarr; Parser a c\n- *eos* : &forall; c . unit &rarr; Parser unit c\n- *satisfy* : &forall; a . (a &rarr; bool) &rarr; Parser a a\n- *try* : &forall; a c . Parser a c &rarr; Parser a c\n- *not* : &forall; a c . Parser a c &rarr; Parser a c\n\n#### Char sequence constructors:\n- *digit* : Parser char char\n- *lowerCase* : Parser char char\n- *upperCase* : Parser char char\n- *letter* : Parser char char\n- *notChar* : char &rarr; Parser char char\n- *aChar* : char &rarr; Parser char char\n- *charLitteral* : Parser char char\n- *stringLitteral* : Parser string char\n- *numberLitteral* : Parser number char\n- *aString* : string &rarr; Parser string char\n\n#### Parser Combinators:\n- *and* : &forall; a b c . **Parser a c** &rArr; Parser b c &rarr; Parser [a,b] c\n- *andLeft* : &forall; a b c . **Parser a c** &rArr; Parser b c &rarr; Parser a c\n- *andRight* : &forall; a b c . **Parser a c** &rArr; Parser b c &rarr; Parser b c\n- *or* : &forall; a c . **Parser a c** &rArr; Parser a c &rarr; Parser a c\n- *opt* : &forall; a c . **Parser a c** &rArr; unit &rarr; Parser (Option a) c\n- *rep* : &forall; a c . **Parser a c** &rArr; unit &rarr; Parser (List a) c\n- *optrep* : &forall; a c . **Parser a c** &rArr; unit &rarr; Parser (List a) c\n- *match* : &forall; a c . **Parser a c** &rArr; Comparable a &rarr; Parser a c\n\n#### Parser manipulation:\n- *map* : &forall; a b c . **Parser a c** &rArr; (a &rarr; b) &rarr; Parser b c\n- *flatmap* : &forall; a b c . **Parser a c** &rArr; (a &rarr; Parser b c) &rarr; Parser b c\n- *filter* : &forall; a b c . **Parser a c** &rArr; (a &rarr; bool) &rarr; Parser a c\n\n#### Chaining parsers by composition:\n- *chain* : &forall; a b c . **Parser a c** &rArr; Parser b a &rarr; Parser b c\n\n#### Parser Main Function:\n- *parse* : &forall; a c . **Parser a c** &rArr; Stream c &rarr; number &rarr; Response a\n\n### Token\n\n#### Token builder:\n- *keyword* : string &rarr; Token \n- *ident* : string &rarr; Token \n- *number* : string &rarr; Token \n- *string* : string &rarr; Token \n- *char* : string &rarr; Token \n\n#### Token parser:\n- *keyword* : Parser Token Token\n- *ident* : Parser Token Token\n- *number* : Parser Token Token \n- *string* : Parser Token Token \n- *char* : Parser Token Token\n\n### Generic Lexer\n\n#### GenlexFactory data type:\n- *keyword* : &forall; a . string &rarr; a\n- *ident* : &forall; a .string &rarr; a\n- *number* : &forall; a .number &rarr; a\n- *string* : &forall; a .string &rarr; a\n- *char* : &forall; a .char &rarr; a\n\n#### Genlex generator:\n- *keyword* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *ident* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *number* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *string* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *char* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *token* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser a char\n- *tokens* : &forall; a . **Genlex [String]** &rArr; GenlexFactory a &rarr; Parser [a] char\n\n### Tokenizer\n\n#### Tokenizer [String]\n- *tokenize* : **Tokenizer [String]** &rArr; Stream char &rarr; Try [Token]\n\n## License\n\nCopyright (C)2016 D. Plaindoux.\n\nThis program is  free software; you can redistribute  it and/or modify\nit  under the  terms  of  the GNU  Lesser  General  Public License  as\npublished by  the Free Software  Foundation; either version 2,  or (at\nyour option) any later version.\n\nThis program  is distributed in the  hope that it will  be useful, but\nWITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of\nMERCHANTABILITY  or FITNESS  FOR  A PARTICULAR  PURPOSE.  See the  GNU\nLesser General Public License for more details.\n\nYou  should have  received a  copy of  the GNU  Lesser General  Public\nLicense along with  this program; see the file COPYING.  If not, write\nto the  Free Software Foundation,  675 Mass Ave, Cambridge,  MA 02139,\nUSA.\n\n\n\n\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '937bf96586080d51a87e87590aef39c22696cecf',
21 silly publish   _id: 'parser-combinator@0.1.0',
21 silly publish   _shasum: '5492f3ee29a342eefe23e257ffbd6e9c220c9e85',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name parser-combinator
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'parser-combinator',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'parser-combinator',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/parser-combinator
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/didierplaindoux/.npm/parser-combinator/0.1.0/package.tgz
30 verbose stack Error: auth required for publishing
30 verbose stack     at CachingRegistryClient.publish (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:30:14)
30 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:137:14
30 verbose stack     at mapToRegistry (/usr/local/lib/node_modules/npm/lib/utils/map-to-registry.js:62:3)
30 verbose stack     at publish_ (/usr/local/lib/node_modules/npm/lib/publish.js:106:3)
30 verbose stack     at Array.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
30 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
30 verbose stack     at LOOP (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
30 verbose stack     at chain (/usr/local/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
30 verbose stack     at /usr/local/lib/node_modules/npm/lib/publish.js:72:5
30 verbose stack     at RES (/usr/local/lib/node_modules/npm/node_modules/inflight/inflight.js:23:14)
31 verbose cwd /Users/didierplaindoux/PersonalWork/oss/parsec
32 error Darwin 15.6.0
33 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
34 error node v6.2.1
35 error npm  v3.9.6
36 error code ENEEDAUTH
37 error need auth auth required for publishing
38 error need auth You need to authorize this machine using `npm adduser`
39 verbose exit [ 1, true ]
